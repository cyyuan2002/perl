#!/usr/bin/perl

#===============================================================================
#
#         FILE: SV_VCFBreakMerge.pl
#
#        USAGE:
#
#  DESCRIPTION: This script is used to merge the vcf files of SV that generated by
#               different software. It can also filter the results with centromere regions and
#               repeats that generated by RepeatMasker.
#               CTX is not in VCF format
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Yuan Chen
#      COMPANY: Division of Infectious Disease, DUMC
#      VERSION: 1.1
#      CREATED: Feb-03-2013
#     REVISION:
#===============================================================================

use strict;
use Getopt::Long;

my %opts;

GetOptions(\%opts,"i=s","t=s","a:i","b:i","c:s","f:i","r:s","p:i");
if(! defined($opts{i}) || ! defined($opts{t})){
    &Usage();
}

my $FileList=$opts{'i'};
my $SVType=$opts{'t'};
my $Outlength=$opts{'a'};
my $Inlength=$opts{'b'};
my $CentroFile=$opts{'c'};
my $CentroFlanking=$opts{'f'};
my $RepeatFile=$opts{'r'};
my $RepeatFlanking=$opts{'p'};
my $MinReplength=50;

$Outlength||=100;
$Inlength||=100;
$CentroFlanking||=200;
$RepeatFlanking||=50;

my %Centromeres;
my %Repeats;

open(my $fh_filelist,"$FileList") || die "Can't find file: $FileList\n";
my @Files=<$fh_filelist>;
close $fh_filelist;

my $Tempfile1="$FileList.tmp1";
my $Tempfile2="$FileList.tmp2";
my $BreakFile="$FileList.$SVType.brk";

open(my $fh_temp1,">$Tempfile1");

foreach my $Fileinfo(@Files){
    chomp($Fileinfo);
    my @infos=split(/\=/,$Fileinfo);
    my $FileName=$infos[1];
    my $Software=$infos[0];
    open(my $fh_vcffile,$FileName) || die "Can't find file: $FileName\n";
    while(<$fh_vcffile>){
        chomp();
        next if(/^#/);
        my @lines=split(/\t/,$_);
        my ($chromA,$chromB,$posA,$posB);
        $chromA=$lines[0];
        $posA=$lines[1];
        if($SVType ne "ITX" && $SVType ne "CTX"){
            $chromB=$lines[0];
            my @infos=split(/;/,$lines[7]);
            for my $info(@infos){
                if($info=~/^END=(\d+)/){
                    $posB=$1;
                    last;
                }
            }
        }
        else{
            $chromB=$lines[2];
            $posB=$lines[3];
        }
        $chromA=~/\w+.(\d+)/;
        my $chrAN=$1;
        $chromB=~/\w+.(\d+)/;
        my $chrBN=$1;
        if($chrAN <= $chrBN){
            print $fh_temp1 "$chromA\t$posA\t$chromB\t$posB\t$SVType\t$Software\n";
        }
        else{
            print $fh_temp1 "$chromB\t$posB\t$chromA\t$posA\t$SVType\t$Software\n";
        }
        
    }
    close $fh_vcffile;
}
close $fh_temp1;

`cat $Tempfile1 | sort -k 1,1 -k 2,2n -k 3,3 -k 4,4n > $Tempfile2`;

if($CentroFile ne ""){
    open(my $fh_centro,$CentroFile) || die "Can't open file: $CentroFile\n";
    while(<$fh_centro>){
        chomp();
        my @lines=split(/\t/,$_);
        $Centromeres{$lines[0]}->{'s'}=$lines[1];
        $Centromeres{$lines[0]}->{'e'}=$lines[2];
    }
    close $fh_centro;
}

if($RepeatFile ne ""){
    my @breaks;
    my $lastchrom;
    open(my $fh_repeat,$RepeatFile) || die "Can't open file: $RepeatFile\n";
    while(<$fh_repeat>){
        $_=&trim($_);
        my @lines=split(/\s+/,$_);
        if($lastchrom ne $lines[4]){
            if($lastchrom ne ""){
                my @arraytmp=@breaks;
                $Repeats{$lastchrom}=\@arraytmp;
            }
            @breaks=();
            $lastchrom=$lines[4];
        }
        if($lines[6]-$lines[5] >= $MinReplength){
            my %repinfo;
            $repinfo{'s'}=$lines[5];
            $repinfo{'e'}=$lines[6];
            push(@breaks,\%repinfo);
        }
    }
    close $fh_repeat;
    my @arraytmp=@breaks;
    $Repeats{$lastchrom}=\@arraytmp;
}


open(my $fh_out,">$BreakFile");
open(my $fh_temp2,"$Tempfile2");
my @brks;
my $lastchrom;
while(<$fh_temp2>){
    chomp();
    my @lines=split(/\t/,$_);
    if($lines[0] eq $lastchrom){
        my ($isoverlap,$index)=&checksite($lines[1],$lines[2],$lines[3]);
        if($isoverlap==0){
            my %info;
            $info{'posA'}=$lines[1];
            $info{'chr'}=$lines[2];
            $info{'posB'}=$lines[3];
            $info{'soft'}=$lines[5];
            push(@brks,\%info);
        }
        else{
            if($isoverlap==1){
                $brks[$index]->{'soft'}.=":$lines[5]";
            }
            elsif($isoverlap==2){
                $brks[$index]->{'posA'}=$lines[1];
                $brks[$index]->{'posB'}=$lines[3];
                $brks[$index]->{'soft'}="$lines[5]:".$brks[$index]->{'soft'};
            }
        }
    }
    else{
        if($lastchrom ne ""){
            if($CentroFile ne ""){
                @brks=&CentroFilter($lastchrom,@brks);
            }
            if($RepeatFile ne ""){
                @brks=&RepFilter($lastchrom,@brks);
            }
            for(my $i=0;$i<@brks;$i++){
                my %info=%{$brks[$i]};
                print $fh_out "$lastchrom\t$info{'posA'}\t$info{'chr'}\t$info{'posB'}\t$SVType\t$info{'soft'}\n";
            }
        }
        @brks=();
        $lastchrom=$lines[0];
        my %info;
        $info{'posA'}=$lines[1];
        $info{'chr'}=$lines[2];
        $info{'posB'}=$lines[3];
        $info{'soft'}=$lines[5];
        push(@brks,\%info);
    }
}
{
    if($CentroFile ne ""){
        @brks=&CentroFilter($lastchrom,@brks);
    }
    if($RepeatFile ne ""){
        @brks=&RepFilter($lastchrom,@brks);
    }
    for(my $i=0;$i<@brks;$i++){
        my %info=%{$brks[$i]};
        print $fh_out "$lastchrom\t$info{'posA'}\t$info{'chr'}\t$info{'posB'}\t$SVType\t$info{'soft'}\n";
    }
}
close $fh_temp2;
close $fh_out;
unlink $Tempfile1;
unlink $Tempfile2;
exit(0);

sub checksite(){
    my ($posA,$chromB,$posB)=@_;
    for(my $i=0;$i<@brks;$i++){
        my %info=%{$brks[$i]};
        if($posA-$Outlength <= $info{'posA'} && $posA+$Inlength >=$info{'posA'}){
            if($chromB eq $info{'chr'}){
                if($posB-$Inlength <= $info{'posB'} && $posB+$Outlength >=$info{'posB'}){
                    if($info{'soft'} eq "CV"){
                        return (2,$i);
                    }
                    else{
                        return (1,$i);
                    }
                }
            }
        }
        elsif($posA+$Inlength < $info{'posA'}){
            return 0;
        }
    }
    return 0;
}

sub CentroFilter(){
    my @breaks=@_;
    my @filteredbrks;
    my $chromA=shift(@breaks);
    for(my $i=0;$i<@breaks;$i++){
        my %breakinfo=%{$breaks[$i]};
        my $chromB=$breakinfo{'chr'};
        my $centroAS=$Centromeres{$chromA}->{'s'}-$CentroFlanking;
        my $centroAE=$Centromeres{$chromA}->{'e'}+$CentroFlanking;
        my $centroBS=$Centromeres{$chromB}->{'s'}-$CentroFlanking;
        my $centroBE=$Centromeres{$chromB}->{'e'}+$CentroFlanking;
        next if($breakinfo{'posA'} >= $centroAS && $breakinfo{'posA'} <= $centroAE);
        next if($breakinfo{'posB'} >= $centroBS && $breakinfo{'posB'} <= $centroBE);
        push(@filteredbrks,\%breakinfo);
    }
    return (@filteredbrks);
}

sub RepFilter(){
    my @breaks=@_;
    my @filteredbrks;
    my $chromA=shift(@breaks);
    for(my $i=0;$i<@breaks;$i++){
        my %breakinfo=%{$breaks[$i]};
        my $brkA=$breakinfo{'posA'};
        my $brkB=$breakinfo{'posB'};
        if($SVType ne "CTX"){
            my @repeats=@{$Repeats{$chromA}};
            my $isRep=0;
            for(my $j=0;$j<@repeats;$j++){
                my %repinfo=%{$repeats[$j]};
                my $repS=$repinfo{'s'}-$RepeatFlanking;
                my $repE=$repinfo{'e'}+$RepeatFlanking;
                if($brkA >= $repS && $brkA<=$repE){
                    $isRep=1;
                    last;
                }
                if($brkB >= $repS && $brkB<=$repE){
                    $isRep=1;
                    last;
                }
                last if($repS > $brkB);
            }
            next if($isRep);
            push(@filteredbrks,\%breakinfo);
        }
        else{
            my $chromB=$breakinfo{'chr'};
            my @repeatsA=@{$Repeats{$chromA}};
            my @repeatsB=@{$Repeats{$chromB}};
            my $isRep=0;
            for(my $j=0;$j<@repeatsA;$j++){
                my %repinfo=%{$repeatsA[$j]};
                my $repS=$repinfo{'s'}-$RepeatFlanking;
                my $repE=$repinfo{'e'}+$RepeatFlanking;
                if($brkA >= $repS && $brkA<=$repE){
                    $isRep=1;
                    last;
                }
                last if($repS > $brkA);
            }
            next if($isRep);
            for(my $j=0;$j<@repeatsB;$j++){
                my %repinfo=%{$repeatsB[$j]};
                my $repS=$repinfo{'s'}-$RepeatFlanking;
                my $repE=$repinfo{'e'}+$RepeatFlanking;
                if($brkB >= $repS && $brkB<=$repE){
                    $isRep=1;
                    last;
                }
                last if($repS > $brkB);
            }
            next if($isRep);
            push(@filteredbrks,\%breakinfo);
        }
    }
    return(@filteredbrks);
}

sub trim($)
{
    my $string = shift;
    $string =~ s/^\s+//;
    $string =~ s/\s+$//;
    return $string;
}


sub Usage #help subprogram
{
    print << "    Usage";

	Usage: $0 -i <File_List> -t <SV_Type> [options]

        Options: -a    Outter flanking length, default 100

                 -b     Inner flanking length, default 100

		 -c      Centromere regions for filtering the breakpoints

		 -f     Flanking length of centromere, default 200

                 -r      Repeat regions for filtering the breakpoints

                 -p     Flanking length of repeats, default 50

    Usage

	exit(1);
};
