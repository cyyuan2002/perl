#!/usr/bin/perl

#===============================================================================
#
#         FILE: 
#
#        USAGE:
#
#  DESCRIPTION:This script is used to treat the GFF file that generated by
#              transdecoder (Trinity). The longest transcript of the gene will be
#              selected. The transcipt has two ORFs that have less than 90% overlap will be removed.
#
#      OPTIONS: ---
# REQUIREMENTS: ---
#         BUGS: ---
#        NOTES: ---
#       AUTHOR: Yuan Chen
#      COMPANY: Division of Infectious Disease, DUMC
#      VERSION: 1.0
#      CREATED: 
#     REVISION:
#===============================================================================

use strict;

my ($GffFile,$PepFile)=@ARGV;
if (@ARGV < 2) {
    die "Usage:$0 <Gff_File> <Pep_File>\n";
}

my %ORFinfo;
my $overpercent=0.8;

open(my $fh_gff,"<",$GffFile) or die "Can't open file: $GffFile";
while (<$fh_gff>) {
    next if(/^\s+$/);
    chomp();
    my @lines=split(/\t/,$_);
    if ($lines[2] eq "mRNA") {
        my ($gID,$gPID);
        if ($lines[8]=~/ID=(\S+);Parent=(\S+)/) {
            $gID = $1;
            $gPID = $2;
        }
        my $ORF_len = $lines[4]-$lines[3]+1;
        if (exists($ORFinfo{$lines[0]})) {           
            my $code_s=$ORFinfo{$lines[0]}->{'s'};
            my $code_e=$ORFinfo{$lines[0]}->{'e'};
            my $code_len=$code_e-$code_s+1;
            my ($over_s,$over_e);
            $code_s > $lines[3] ? $over_s=$code_s : $over_s=$lines[3];
            $code_e < $lines[4] ? $over_e=$code_e : $over_e=$lines[4];
            my $overlen = $over_e - $over_s +1;
            
            if ($overlen / $code_len < 0.8 && $overlen / $ORF_len < 0.8) {
                $ORFinfo{$lines[0]} -> {'d'} = 1;
            }
            else{
                if ($ORF_len > $code_len) {
                    $ORFinfo{$lines[0]}->{'s'} = $lines[3];
                    $ORFinfo{$lines[0]}->{'e'} = $lines[4];
                    $ORFinfo{$lines[0]}->{'len'} = $ORF_len;
                    $ORFinfo{$lines[0]}->{'id'} = $gID;
                    $ORFinfo{$lines[0]}->{'pid'} = $gPID;
                }
            }
        }
        else{
            $ORFinfo{$lines[0]}->{'s'} = $lines[3];
            $ORFinfo{$lines[0]}->{'e'} = $lines[4];
            $ORFinfo{$lines[0]}->{'len'} = $ORF_len;
            $ORFinfo{$lines[0]}->{'id'} = $gID;
            $ORFinfo{$lines[0]}->{'pid'} = $gPID;
            $ORFinfo{$lines[0]}->{'d'} = 0;
        }   
    }
}
close $fh_gff;

my %geneinfo;
foreach my $key(keys %ORFinfo){
    my @ids=split(/\_/,$key);
    next if($ORFinfo{$key}->{'d'} == 1);
    my $gID=$ids[0];
    if (exists($geneinfo{$gID})) {
        if ($geneinfo{$gID}->{'len'} < $ORFinfo{$key}->{'len'}) {
            $geneinfo{$gID} = $ORFinfo{$key};
        }
    }
    else{
        $geneinfo{$gID} = $ORFinfo{$key};
    }
}

my $seqName;
my $seq;
my %seqs;
open(my $fh_pep,"<", $PepFile) or die "Can't open file: $PepFile";
while(<$fh_pep>){
    if(/^>(\S+)/){
        if($seq ne ""){
            $seqs{$seqName}=$seq;
        }
        $seqName=$1;
        $seq="$_";
    }
    else{
        $seq=$seq.$_;
    }
}
$seqs{$seqName}=$seq;
close $fh_pep;

foreach my $key(keys %geneinfo){
    my $seqid=$geneinfo{$key}->{'id'};
    print $seqs{$seqid};
}

exit(0);
