#!/usr/bin/perl
##Annotation genome with one gene per record

use strict;
use Getopt::Long;

my $version="1.0 Alvin Chen 2011-01-16";
my %opts;
##Read parameters
GetOptions(\%opts,"i=s","o=s","a:i","c:i","l:i","help");
if((!defined $opts{i})||(!defined $opts{o})){
    &Usage();
}

my $parInputFile=$opts{i};
my $parOutputFile=$opts{o};
my $parIdentity=(defined $opts{a}) ? $opts{a} : 90;
my $parCoverage=(defined $opts{c}) ? $opts{c} : 90;
my $parLength=(defined $opts{l}) ? $opts{l} : 150;
my $parBaseDiff=5;


my $iserror=0;
my @fileInput; #store all the psl information
my %jumplines; ##the line numbers contains redundant infors


&Filecheck($parInputFile,0);
&Filecheck($parOutputFile,1);

if($iserror==1){
    exit(1);
}

open(fileIN,$parInputFile);
@fileInput=<fileIN>;
close fileIN;

my $fileOut;
open($fileOut,">$parOutputFile");

my %checkedids;
my @currgene;
my $genecount=0;

for(my $i=0;$i<@fileInput;$i++){
    ##read current result information
    my $currline=$fileInput[$i];
    $currline=~s/\n//g;
    my @currinfo=split(/\t/,$currline);
    next if($currinfo[10]<$parLength);
    next if(&hitfilter($currline));
    next if(exists($checkedids{$currinfo[9]}));
    $genecount++;
    @currgene=();
    @currgene=@currinfo;

    ##compare to following results
    ##$j may bigger than @fileInput

    for(my $j=$i+1;$j<@fileInput;$j++){
	my $newline=$fileInput[$j];
	$newline=~s/\n//g;
	my @newinfo=split(/\t/,$newline);
	next if ($newinfo[10]<$parLength);
	next if (&hitfilter($newline));
	next if(exists($checkedids{$currinfo[9]}));
	my $isoverlap=&checkoverlap(join("\t",@currgene),$newline);
	if ($isoverlap==0){ ##no overlap move to next currline
	    print $fileOut "$currgene[13]\t$currgene[14]\t$currgene[15]\t$currgene[16]\t$currgene[8]\t$currgene[17]\t$currgene[18]\t$currgene[20]\t$currgene[9]\tgene_$genecount\n";
	    last;
	}
	elsif ($isoverlap==1){ ##overlap but different direction
	    next;
	}
	else{ ##overlap same direction
	    my @currStarts=split(/,/,$currgene[20]);
	    my @currSizes=split(/,/,$currgene[18]);
	    my @newStarts=split(/,/,$newinfo[20]);
	    my @newSizes=split(/,/,$newinfo[18]);
	    my @texons;
	    my @sexons;

	    my $dir=$currStarts[8];
	    if($dir eq "+"){
		for(my $k=0;$k<@currStarts;$k++){
		    my $end=$currStarts[$k]+$currSizes[$k];
		    my $exon="$currStarts[$k]:$end";
		    push(@texons,$exon);
		}


		for(my $k=0;$k<@newStarts;$k++){
		    my $end=$newStarts[$k]+$newSizes[$k];
		    my $exon="$newStarts[$k]:$end";
		    push(@sexons,$exon);
		}
	    }
	    else{
		my $startnum=scalar(@currStarts)-1;
		my $newnum=scalar(@newStarts)-1;
		for(my $k=0;$k<@currStarts;$k++){
		    my $end=$currStarts[$k]+$currSizes[$startnum-1];
		    my $exon="$currStarts[$k]:$end";
		    push(@texons,$exon);
		}

		for(my $k=0;$k<@newStarts;$k++){
		    my $end=$newStarts[$k]+$currSizes[$newnum-1];
		    my $exon="$newStarts[$k]:$end";
		    push(@sexons,$exon);
		}
	    }

	    my $isoform=&checkisoform($dir,\@texons,\@sexons,$currgene[10],$newinfo[10]);
	    if($isoform==1){
		$checkedids{$newinfo[9]}=1;  #isoform conformed
		&mergeinfo(\@currgene,\@newinfo);
		$currgene[9]=$currgene[9].",".$newinfo[9];
	    }
	}
    }
}

print $fileOut "$currgene[13]\t$currgene[14]\t$currgene[15]\t$currgene[16]\t$currgene[8]\t$currgene[17]\t$currgene[18]\t$currgene[20]\t$currgene[9]\tgene_$genecount\n";
close $fileOut;

sub mergeinfo{
    my ($currsite,$newsite)=@_;
    my @tinfos=@$currsite;
    my @qinfos=@$newsite;
    my @currStarts=split(/,/,$tinfos[20]);
    my @currSizes=split(/,/,$tinfos[18]);
    my @newStarts=split(/,/,$qinfos[20]);
    my @newSizes=split(/,/,$qinfos[18]);
    my @currEnds;
    my @newEnds;
    my @editStarts;
    my @editEnds;
    my @editSizes;

    my %exoninfo;

    for(my $i=0;$i<@currStarts;$i++){
	my $ends=$currStarts[$i]+$currSizes[$i];
	push(@currEnds,$ends);
    }
    for(my $i=0;$i<@newStarts;$i++){
	my $ends=$newStarts[$i]+$newSizes[$i];
	push(@newEnds,$ends);
    }
    my ($currcount,$newcount);
    $currcount=0;
    $newcount=0;




    while($currcount<@currStarts && $newcount<@newStarts){
	if($currEnds[$currcount]<$newStarts[$newcount]){
	    push(@editStarts,$currStarts[$currcount]);
	    push(@editEnds,$currEnds[$currcount]);
	    push(@editSizes,$currSizes[$currcount]);
	    $currcount++;
	}
	elsif($currStarts[$currcount]<=$newStarts[$newcount] && $currEnds[$currcount]>=$newStarts[$newcount]){
	    if($currEnds[$currcount]<=$newEnds[$newcount]){
		push(@editStarts,$currStarts[$currcount]);
		push(@editEnds,$newEnds[$newcount]);
		my $size=$newEnds[$newcount]-$currStarts[$currcount]+1;
		push(@editSizes,$size);
		$currcount++;
		$newcount++;
	    }
	    else{
		push(@editStarts,$currStarts[$currcount]);
		push(@editEnds,$currEnds[$currcount]);
		push(@editSizes,$currSizes[$currcount]);
		$currcount++;
		$newcount++;
	    }
	}
	elsif($newStarts[$newcount]<=$currStarts[$currcount] && $newEnds[$newcount]>=$currStarts[$currcount]){
	    if($newEnds[$newcount]<=$currEnds[$currcount]){
		push(@editStarts,$newStarts[$newcount]);
		push(@editEnds,$currEnds[$currcount]);
		my $size=$currEnds[$currcount]-$newStarts[$newcount]+1;
		push(@editSizes,$size);
		$currcount++;
		$newcount++;
	    }
	    else{
		push(@editStarts,$newStarts[$newcount]);
		push(@editEnds,$newEnds[$newcount]);
		push(@editSizes,$newSizes[$newcount]);
		$currcount++;
		$newcount++;
	    }
	}
	elsif($newEnds[$newcount]<$currStarts[$currcount]){
	    push(@editStarts,$newStarts[$newcount]);
	    push(@editEnds,$newEnds[$newcount]);
	    push(@editSizes,$newSizes[$newcount]);
	    $newcount++;
	}
    }

    if($currcount<@currStarts){
	push(@editStarts,$currStarts[$currcount]);
	push(@editEnds,$currEnds[$currcount]);
	push(@editSizes,$currSizes[$currcount]);
	$currcount++;
    }
    if($newcount<@newStarts){
	push(@editStarts,$newStarts[$newcount]);
	push(@editEnds,$newEnds[$newcount]);
	push(@editSizes,$newSizes[$newcount]);
	$newcount++;
    }

    my $lastStart=$editStarts[0];
    my $lastEnd=$editEnds[0];

    my @finalStarts;
    my @finalSizes;


    for(my $i=1;$i<@editStarts;$i++){
	if($editStarts[$i]>$lastEnd){
	    push(@finalStarts,$lastStart);
	    my $size=$lastEnd-$lastStart+1;
	    push(@finalSizes,$size);
	    $lastStart=$editStarts[$i];
	    $lastEnd=$editEnds[$i];
	}
	else{
	    if($editEnds[$i]>$lastEnd){
		$lastEnd=$editEnds[$i];
	    }
	}
    }
    push(@finalStarts,$lastStart);
    my $size=$lastEnd-$lastStart+1;
    push(@finalSizes,$size);

    my $starts;
    my $sizes;

    $currgene[15]=$finalStarts[0];
    $currgene[16]=$finalStarts[scalar(@finalStarts)-1]+$finalSizes[scalar(@finalStarts)-1];

    for(my $i=0;$i<@finalStarts;$i++){
	$starts=$starts.$finalStarts[$i].",";
	$sizes=$sizes.$finalSizes[$i].",";
    }
    $currgene[17]=scalar(@finalStarts);
    $currgene[18]=$sizes;
    $currgene[20]=$starts;
}


sub checkisoform{  ##check the isoform of different blat hit
    my ($dir,$texon,$sexon,$tlength,$slength)=@_;
    my @texons=@$texon;
    my @sexons=@$sexon;


    my $exonmatch=0;
    my $lengthmatch=0;
    my $exonnum=0;
    my $querylength=0;

    my $texoncount=0;
    my $sexoncount=0;

    while($texoncount<@texons && $sexoncount<@sexons){
	my @texonregion=split(/\:/,$texons[$texoncount]);
	my @sexonregion=split(/\:/,$sexons[$sexoncount]);
	if($texonregion[0]<=$sexonregion[0] && $texonregion[1]>=$sexonregion[0]){
	    if($texonregion[1]<=$sexonregion[1]){
	        my $overlength=$texonregion[1]-$sexonregion[0]+1;
		$lengthmatch+=$overlength;
		$texoncount++;
	    }
	    else{
		my $overlength=$sexonregion[1]-$sexonregion[0]+1;
		$lengthmatch+=$overlength;
		$sexoncount++;
	    }
	}
	elsif($sexonregion[0]<=$texonregion[0] && $sexonregion[1]>=$texonregion[0]){
	    if($texonregion[1]<=$sexonregion[1]){
		my $overlength=$texonregion[1]-$texonregion[0]+1;
		$lengthmatch+=$overlength;
		$texoncount++;
	    }
	    else{
		my $overlength=$sexonregion[1]-$texonregion[0]+1;
		$lengthmatch+=$overlength;
		$sexoncount++;
	    }
	}
	else{
	    if($texonregion[0]>$sexonregion[1]){
		$sexoncount++;
	    }
	    elsif($sexonregion[0]>$texonregion[1]){
		$texoncount++;
	    }
	    else{
		print "Error:AAAA\n";
	    }
	}
    }

    my $querymatchpercent=$lengthmatch/$slength;

    if($querymatchpercent>=0.5){
	return 1;
    }
    else{
	return 0;
    }
}



sub checkoverlap{
    my ($lineA,$lineB)=@_;
    my @lineAs=split(/\t/,$lineA);
    my @lineBs=split(/\t/,$lineB);
    return (0) if($lineAs[13] ne $lineBs[13]);  #different chrom
    return (0) if($lineAs[16]<=$lineBs[15]); # no overlap
    return (1) if($lineAs[8] ne $lineAs[8]); # overlap but different direction
    return (2); #overlap
}

sub hitfilter{
    my $hitinfo=shift;
    my @hitinfors=split(/\t/,$hitinfo);
    my $hitcover=(($hitinfors[0]+$hitinfors[1]+$hitinfors[2])/$hitinfors[10])*100;
    return 1 if($hitcover<$parCoverage);
    my $pid=get_pid(@hitinfors);

    return 1 if($pid<$parIdentity);

    return 0;
}

sub get_pid {
    my @line = @_;
    my $pid = (100.0 - (&pslCalcMilliBad(@line) * 0.1));
    return $pid;
}


sub pslCalcMilliBad {
    my @cols = @_;

    # sizeNul depens of dna/Prot
    my $sizeMul=1;

    my $qAliSize = $sizeMul * ($cols[12] - $cols[11]);
    my $tAliSize = $cols[16] - $cols[15];

    # I want the minimum of qAliSize and tAliSize
    my $aliSize;
    $qAliSize < $tAliSize ? $aliSize = $qAliSize : $aliSize = $tAliSize;

    # return 0 is AliSize == 0
    return 0 if ($aliSize <= 0);

    # size diff
    my $sizeDiff = $qAliSize - $tAliSize;
    if ($sizeDiff < 0) {
	    $sizeDiff = 0;
    }

    # insert Factor
    my $insertFactor = $cols[4];
    my $milliBad = (1000 * ($cols[1]*$sizeMul + $insertFactor + &round(3*log( 1 + $sizeDiff)))) / ($sizeMul * ($cols[0] + $cols[2] + $cols[1]));
    return $milliBad;
}

sub round {
    my $number = shift;
    return int($number + .5);
}


sub Filecheck{
    my ($Filename,$mode)=@_;
    if($mode==0){
	if(!(-e $Filename)){
	    print stderr "Can't find file: $Filename\n";
	    $iserror=1;
	}
    }
    else{
	if(-e $Filename){
	    print stderr "File $Filename already exists\n";
	    $iserror=1;
	}
    }
}




sub Usage(){
  print << "    Usage";

	Usage:  $0 (version $version)

	<options>
		-i     Input psl file
		-o     Output annonation file
		-a     Identity of blat hits, default 90
		-c     Coverage of blat hits, default 90
		-l     Minimal length of target sequence, default 150

    Usage

	exit(0);
};


=PSL information
   1.  matches - Number of bases that match that aren't repeats
   2. misMatches - Number of bases that don't match
   3. repMatches - Number of bases that match but are part of repeats
   4. nCount - Number of 'N' bases
   5. qNumInsert - Number of inserts in query
   6. qBaseInsert - Number of bases inserted in query
   7. tNumInsert - Number of inserts in target
   8. tBaseInsert - Number of bases inserted in target
   9. strand - '+' or '-' for query strand. In mouse, second '+'or '-' is for genomic strand
  10. qName - Query sequence name
  11. qSize - Query sequence size
  12. qStart - Alignment start position in query
  13. qEnd - Alignment end position in query
  14. tName - Target sequence name
  15. tSize - Target sequence size
  16. tStart - Alignment start position in target
  17. tEnd - Alignment end position in target
  18. blockCount - Number of blocks in the alignment
  19. blockSizes - Comma-separated list of sizes of each block
  20. qStarts - Comma-separated list of starting positions of each block in query
  21. tStarts - Comma-separated list of starting positions of each block in target
=cut
